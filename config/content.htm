<h1>about</h1>
<p>四設計二甲</p>
<p>40823110 張昀棨</p>
<p></p>
<p>cd2021</p>
<p>個人倉儲:<a href="https://github.com/40823110/cd2021"></a><a href="https://github.com/40823110/cd2021">github</a></p>
<p>團隊網站:<span> </span><a href="https://40823152.github.io/stage1-ag21/">stage1-ag21</a></p>
<p><a href="https://40823153.github.io/stage1-ag21/content/index.html">stage1-ag21 (備用)</a></p>
<p>團隊倉儲:<span> <a href="https://github.com/40823152/stage1-ag21">stage1-ag21</a>(主)</span></p>
<p><a href="https://github.com/40823153/stage1-ag21">stage1-ag21(備用)</a></p>
<hr/>
<p></p>
<p><br/> <a href="/get_page/About/W1-W4.html">Next</a> &gt;&gt; W1-W4</p>
<h1>每周學習進度</h1>
<p><br/><br/><a href="https://cad.onshape.com/documents/5163181e2fe649a1d31dd674/w/4e88bfbfabd294ec7f2f2b4d/e/697be15fa1b7438b20521146"></a></p>
<h2>W3進度</h2>
<p>onshape 零件圖</p>
<p>軸承零件</p>
<p><a href="https://cad.onshape.com/documents/0bfc2dc1ec6f4ab23ac54ffe/w/0dfb2b29b00da67b3c1974c6/e/0de22abfa577bb4913cc1c05">https://cad.onshape.com/documents/0bfc2dc1ec6f4ab23ac54ffe/w/0dfb2b29b00da67b3c1974c6/e/0de22abfa577bb4913cc1c05</a><br/><a href='/get_page/W3%E9%80%B2%E5%BA%A6/"https:/cad.onshape.com/documents/0bfc2dc1ec6f4ab23ac54ffe/w/0dfb2b29b00da67b3c1974c6/e/0de22abfa577bb4913cc1c05&lt;/a'></a></p>
<p>引球員盤</p>
<p><a href="https://cad.onshape.com/documents/0e376e65b8e53e50798db3f8/w/38fdbe7da426bcea827d31f5/e/c8220b94c818dc32174f27da">https://cad.onshape.com/documents/0e376e65b8e53e50798db3f8/w/38fdbe7da426bcea827d31f5/e/c8220b94c818dc32174f27da</a></p>
<p>主體</p>
<p><a href="https://cad.onshape.com/documents/6b80403679e6d564d3030ea0/w/e8e6dda875cffa2431ab0d92/e/adac81874f58c0e7f7c82a05">https://cad.onshape.com/documents/6b80403679e6d564d3030ea0/w/e8e6dda875cffa2431ab0d92/e/adac81874f58c0e7f7c82a05</a></p>
<p>底座+球桶</p>
<p><a href="https://cad.onshape.com/documents/e7f83d8dad44353fefca9ba8/w/c9bfde151271f69c6a6a2b1d/e/dfcfbb7a2da4266f925ff71c">https://cad.onshape.com/documents/e7f83d8dad44353fefca9ba8/w/c9bfde151271f69c6a6a2b1d/e/dfcfbb7a2da4266f925ff71c</a></p>
<p>組合圖</p>
<p><a href="https://cad.onshape.com/documents/5163181e2fe649a1d31dd674/w/4e88bfbfabd294ec7f2f2b4d/e/58709a4788fea2051cd57dec">https://cad.onshape.com/documents/5163181e2fe649a1d31dd674/w/4e88bfbfabd294ec7f2f2b4d/e/58709a4788fea2051cd57dec</a></p>
<h2>W4進度</h2>
<h3>ssh</h3>
<p>SSH 指 Secure SHell, 是一種網路連線加密機制, 當我們在 Mac OS 或 Linux 操作系統中的 Terminal 或 XTerm 時, 可以利用 ssh 帳號@遠端主機 ip 或符號名稱, 就可以輸入認證密碼, 登入到遠端主機.</p>
<p>一般針對公開的 Github 倉儲, 任何人都可以直接透過 https 協定 clone 倉儲, 無需認證, 但是倉儲協同者若要從近端將改版資料送到 Github, 就必須通過認證, 假如採 https 協定, 則倉儲協同者在推送改版資料時, 必須提供帳號與密碼.</p>
<p>除了 https 協定, Github 也接受倉儲的協同者以 SSH 連線的方式, git clone private 倉儲, 或以 SSH 連線的方式將近端改版資料推送到遠端倉儲.</p>
<p>SSH 的連線加密機制依賴 private key 與 public key 之間的配對, 當使用者建立 SSH key pair 時, private key 必須保護在近端, 而 public key 則必須送到進行認證的遠端伺服器中.</p>
<h4>建立 OpenSSH key pair</h4>
<p>Github 伺服器所支援的 SSH 為 OpenSSH 檔案格式的協定, 因此使用者要送到 Github 伺服器上的 OpenSSH 格式 public key, 可以透過 portablegit 中的 sh.exe 進入 SHell, 然後利用以下指令建立採 <a href="https://en.wikipedia.org/wiki/RSA_(cryptosystem)">rsa</a> 加密演算法的 key pair:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">ssh-keygen -t rsa -b 4096 -C "使用者學號"</pre>
<p>在 -C 後的使用者學號字串, 會直接附加在 OpenSSH public key 檔案的最後端, 讓使用者得以辨識 public key 的對應使用者, 而所建立的 OpenSSH private key 則可以透過 puttygen 轉換為 putty 特有檔案格式.</p>
<h4>Putty 作為 SSH 連線客戶端工具</h4>
<p>Putty 套件可用於 Windows 與 Linux 操作系統, 可以讓使用者以 SSH 加密機制遠端登入到其他伺服器主機, 由於電腦輔助設計室電腦的第三磁區上課時會轉為純 IPv6 協定上網, 當使用者要將近端改版資料推送到遠端時, 由於 Github 至今仍只支援 IPv4 網路協定, 因此無論是以 https 或 ssh 方式連線, 都必須透過能同時支援 IPv4 與 IPv6 的代理主機.</p>
<p>以 https 協定對 Github 連線的代理主機設定位於 home/.gitconfig, 而在 Windows 10 操作系統中採 SSH 對 Github 連線, 就必須將代理主機與 private key 的設定, 透過 Putty 完成.</p>
<h4>以 SSH 協定與 Github 連線</h4>
<p>1. 建立一對 OpenSSH key pair, private key 保留在近端, 將 public key 登記在 Github 所屬帳號設定中.</p>
<p>2. 近端可攜系統啟動時, 必須確認已經設定</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<p>表示 git 將透過 putty 工具以 ssh 加密協定對 Github 連線</p>
<p>3. 在 Putty 中設定對 github.com ssh 時必須提供的 Proxy 代理主機設定與 Auth 認證所需的近端 private key, 而且必須利用 puttygen 將 OpenSSH 格式轉為 putty 檔案格式</p>
<p>4. 無論在 git clone 或 git push (URL 位於倉儲 .git/config 中), URL 必須使用 <a href="mailto:git@github.com:帳號/倉儲名稱.git">git@github.com:帳號/倉儲名稱.git</a> 連線</p>
<h4>利用 SSH 對 Gitlab 連線</h4>
<ol>
<li>首先必須要將 OpenSSH 格式的 public key 登錄到 Gitlab 帳號下</li>
<li>確定已經利用 putty.exe 建立 session 名稱為 gitlab.com 的設定, 其中設定 AUTH 與 Proxy 資料</li>
<li>修改各倉儲中 .git/config 的 gitlab remote add 設定, 以 url = git@gitlab.com:user_name/url 對 gitlab 連接.</li>
</ol>
<p></p>
<p><br/>Network &lt;&lt; <a href="/get_page/ssh/Network.html">Previous</a> <a href="/get_page/ssh/OpenSSH.html">Next</a> &gt;&gt; OpenSSH</p>
<!-- footer -->
<div class="container">
<div class="row pt-3 mx-auto">
<p><!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --> Copyright ©
<script>
document.write(new Date().getFullYear());
</script>
All rights reserved | This template is made with <i aria-hidden="true" class="icon-heart"></i> by <a href="https://colorlib.com" target="_blank">Colorlib</a> <!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --></p>
</div>
</div>
<!-- for footer -->
<p></p>
<!-- for site wrap -->
<p></p>
<!-- <script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"></script> -->
<script src="/get_page/cmsimde/static/chimper/js/jquery-migrate-3.0.1.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery-ui.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/popper.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/owl.carousel.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.stellar.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.countdown.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/jquery.magnific-popup.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/bootstrap-datepicker.min.js"></script>
<script src="/get_page/cmsimde/static/chimper/js/aos.js"></script>
<!--
            <script src="../cmsimde/static/chimper/js/typed.js"></script>
                    <script>
                    var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
                    </script>
            -->
<script src="/get_page/cmsimde/static/chimper/js/main.js"></script>
<!-- 啟用 LaTeX equations 編輯 -->
<p></p>
<!-- <script>
  MathJax = {
    tex: {inlineMath: [['$', '$'], ['\(', '\)']]}
  };
  </script>
  <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"></script>-->
<p></p>
<h3>更新cmsimde</h3>
<p>進到cmsimde檔案裡輸入下指令合併更新版本</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git pull
</pre>
<p></p>
<p>到up_dir複製一分到cd2021合併資料即可更新完成</p>
<p>接著在命令列輸入cms檢查是否更新完成</p>
<p>若成功將會執行 python wsgi.py</p>
<h2>w5</h2>
<h3>產品目標</h3>
<p>主題:籃球機 二代</p>
<p></p>
<p>動機:</p>
<p>第一次小組產品的籃球機只能自己轉動無法控制，所以二代的籃球機目標增加案件控制轉動。</p>
<p></p>
<p>製作規劃:</p>
<p>w5:確認主題，工作分配</p>
<p></p>
<p>w6:尋找lua程式與<span>coppeliaSim 文章</span>，並且使用lua程式控制軸在coppeliaSim裡模擬，籃球機外觀修整。</p>
<p></p>
<p>w7:完成按鍵控制程式與模擬<span>，籃球機外觀修整。</span></p>
<p><span></span></p>
<p>w8:除錯與修整，完成簡報與pdf</p>
<p></p>
<p>w9:報告</p>
<h3>工作分配</h3>
<p>40823152:coppeliaSim 模擬 ，程式設計，尋找資料</p>
<p>40822310:<span>程式設計，尋找資料</span></p>
<p>40823125:機構設計，尋找資料，簡報製作，heroku創建</p>
<p>40823153:Inventor 畫圖 ，<span>coppeliaSim 模擬</span></p>
<h2>w6</h2>
<h3>Lua資料</h3>
<p><span>使用lua控制軸的轉速</span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
     joint=sim.getObjectHandle('Revolute_joint')
     sim.sJointTargetVelocity(joint,5.5)</pre>
<p>介紹:</p>
<p>1. 設joint 為轉軸</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">	
joint=sim.getObjectHandle('Revolute_joint')</pre>
<p>2.設<span>joint 的</span>速度</p>
<p>呼叫對話框參考資料</p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/regularApi/simGetDialogInput.htm">https://www.coppeliarobotics.com/helpFiles/en/regularApi/simGetDialogInput.htm</a></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/regularApi/simGetDialogResult.htm">https://www.coppeliarobotics.com/helpFiles/en/regularApi/simGetDialogResult.htm</a></p>
<p><a href="https://www.coppeliarobotics.com/helpFiles/en/regularApi/simDisplayDialog.htm">https://www.coppeliarobotics.com/helpFiles/en/regularApi/simDisplayDialog.htm</a></p>
<div>
<p></p>
</div>
<h2>w7</h2>
<h3>keyboard control</h3>
<p><span>使用keyboard</span><span> 控制軸的啟動</span></p>
<p><span>lua程式碼</span></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
    -- do some initialization here
     joint=sim.getObjectHandle('Revolute_joint')
     sim.sJointTargetVelocity(joint,5.5)
     number=-10
      
      
  
 
 
end
 
function sysCall_actuation()
 message,auxiliaryData=sim.getSimulatorMessage()
 if (message==sim.message_keypress) then
      if (auxiliaryData[1]==2007) then
      sim.setJointTargetVelocity(joint,number)
      end
      if (auxiliaryData[1]==2008) then
      sim.setJointTargetVelocity(joint,0)
      end
 end   
 
 
end</pre>
<p><span>1.定義2個參數為sim.getSimulatorMessage()</span></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">	
message,auxiliaryData=sim.getSimulatorMessage()</pre>
<p><span>2.當參數為鍵盤up按鍵，使軸轉number的速度</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">if (message==sim.message_keypress) then
     if (auxiliaryData[1]==2007) then
     sim.setJointTargetVelocity(joint,number)
     end
</pre>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/A5Ws3gGDpjc" width="560"></iframe>&lt;h2&gt;w8&lt;/h2&gt;</p>
<p>&lt;h3&gt;basketball Machine 2.4.3&lt;/h3&gt;</p>
<p></p>
<h2>w8</h2>
<h3>basketball Machine 2.4.3</h3>
<p><span>1.擊球桿新增後轉功能，可以有效控制擊球的時機</span></p>
<p><span></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/R4FlyPlJxqw" width="560"></iframe></p>
<p><br/>Inquire keyboard number &lt;&lt; <a href="/get_page/basketball%20Machine%202.4.3/Inquire keyboard number.html">Previous</a> <a href="/get_page/basketball%20Machine%202.4.3/stage1-product.html">Next</a> &gt;&gt; stage1-product</p>
<h2>W11進度</h2>
<h3>task1</h3>
<p><a href="https://github.com/40823131/stage3-ag1">stage3-ag1 repo</a> | <a href="https://40823131.github.io/stage3-ag1">stage3-ag1 site</a></p>
<p></p>
<p><a href="https://github.com/40823131/cd2021">40823131 repo</a> | <a href="https://40823131.github.io/cd2021">40823131 site</a></p>
<p><a href="https://github.com/a40823112/cd2021">a40823112 repo</a> | <a href="https://a40823112.github.io/cd2021">a40823112 site</a></p>
<p><a href="https://github.com/40823123/cd2021">40823123 repo</a> | <a href="https://40823123.github.io/cd2021">40823123 site</a></p>
<p><a href="https://github.com/40823145/cd2021">40823145 repo</a> | <a href="https://40823145.github.io/cd2021">40823145 site</a></p>
<p><a href="https://github.com/40823136/cd2021">40823136 repo</a> | <a href="https://40823136.github.io/cd2021">40823136 site</a></p>
<p><a href="https://github.com/40823109/cd2021">40823109 repo</a> | <a href="https://40823109.github.io/cd2021">40823109 site</a></p>
<p><a href="https://github.com/40823116/cd2021">40823116 repo</a> | <a href="https://40823116.github.io/cd2021">40823116 site</a></p>
<p><a href="https://github.com/40823108/cd2021">40823108 repo</a> | <a href="https://40823108.github.io/cd2021">40823108 site</a></p>
<p></p>
<p><a href="https://github.com/40823151/stage3-ag2">stage3-ag2 repo</a> | <a href="https://40823151.github.io/stage3-ag2">stage3-ag2 site</a></p>
<p></p>
<p><a href="https://github.com/40823151/cd2021">40823151 repo</a> | <a href="https://40823151.github.io/cd2021">40823151 site</a></p>
<p><a href="https://github.com/40623121/cd2021">40623121 repo</a> | <a href="https://40623121.github.io/cd2021">40623121 site</a></p>
<p><a href="https://github.com/40871106/cd2021">40871106 repo</a> | <a href="https://40871106.github.io/cd2021">40871106 site</a></p>
<p><a href="https://github.com/40823102/cd2021">40823102 repo</a> | <a href="https://40823102.github.io/cd2021">40823102 site</a></p>
<p><a href="https://github.com/40823104/cd2021">40823104 repo</a> | <a href="https://40823104.github.io/cd2021">40823104 site</a></p>
<p><a href="https://github.com/40823106/cd2021">40823106 repo</a> | <a href="https://40823106.github.io/cd2021">40823106 site</a></p>
<p><a href="https://github.com/40823101/cd2021">40823101 repo</a> | <a href="https://40823101.github.io/cd2021">40823101 site</a></p>
<p><a href="https://github.com/40823132/cd2021">40823132 repo</a> | <a href="https://40823132.github.io/cd2021">40823132 site</a></p>
<p></p>
<p><a href="https://github.com/40823119/stage3-ag3">stage3-ag3 repo</a> | <a href="https://40823119.github.io/stage3-ag3">stage3-ag3 site</a></p>
<p></p>
<p><a href="https://github.com/40823119/cd2021">40823119 repo</a> | <a href="https://40823119.github.io/cd2021">40823119 site</a></p>
<p><a href="https://github.com/40823150/cd2021">40823150 repo</a> | <a href="https://40823150.github.io/cd2021">40823150 site</a></p>
<p><a href="https://github.com/40823103/cd2021">40823103 repo</a> | <a href="https://40823103.github.io/cd2021">40823103 site</a></p>
<p><a href="https://github.com/40823107/cd2021">40823107 repo</a> | <a href="https://40823107.github.io/cd2021">40823107 site</a></p>
<p><a href="https://github.com/40523252/cd2021">40523252 repo</a> | <a href="https://40523252.github.io/cd2021">40523252 site</a></p>
<p><a href="https://github.com/40823154/cd2021">40823154 repo</a> | <a href="https://40823154.github.io/cd2021">40823154 site</a></p>
<p></p>
<p><a href="https://github.com/40823142/stage3-ag4">stage3-ag4 repo</a> | <a href="https://40823142.github.io/stage3-ag4">stage3-ag4 site</a></p>
<p></p>
<p><a href="https://github.com/40823142/cd2021">40823142 repo</a> | <a href="https://40823142.github.io/cd2021">40823142 site</a></p>
<p><a href="https://github.com/40823144/cd2021">40823144 repo</a> | <a href="https://40823144.github.io/cd2021">40823144 site</a></p>
<p><a href="https://github.com/40823127/cd2021">40823127 repo</a> | <a href="https://40823127.github.io/cd2021">40823127 site</a></p>
<p><a href="https://github.com/40823148/cd2021">40823148 repo</a> | <a href="https://40823148.github.io/cd2021">40823148 site</a></p>
<p><a href="https://github.com/40823121/cd2021">40823121 repo</a> | <a href="https://40823121.github.io/cd2021">40823121 site</a></p>
<p><a href="https://github.com/40823135/cd2021">40823135 repo</a> | <a href="https://40823135.github.io/cd2021">40823135 site</a></p>
<p><a href="https://github.com/40823114/cd2021">40823114 repo</a> | <a href="https://40823114.github.io/cd2021">40823114 site</a></p>
<p><a href="https://github.com/40823146/cd2021">40823146 repo</a> | <a href="https://40823146.github.io/cd2021">40823146 site</a></p>
<p></p>
<p><a href="https://github.com/40823111/stage3-ag5">stage3-ag5 repo</a> | <a href="https://40823111.github.io/stage3-ag5">stage3-ag5 site</a></p>
<p></p>
<p><a href="https://github.com/40823111/cd2021">40823111 repo</a> | <a href="https://40823111.github.io/cd2021">40823111 site</a></p>
<p><a href="https://github.com/40823115/cd2021">40823115 repo</a> | <a href="https://40823115.github.io/cd2021">40823115 site</a></p>
<p><a href="https://github.com/40823128/cd2021">40823128 repo</a> | <a href="https://40823128.github.io/cd2021">40823128 site</a></p>
<p><a href="https://github.com/40823120/cd2021">40823120 repo</a> | <a href="https://40823120.github.io/cd2021">40823120 site</a></p>
<p><a href="https://github.com/40823140/cd2021">40823140 repo</a> | <a href="https://40823140.github.io/cd2021">40823140 site</a></p>
<p><a href="https://github.com/40823124/cd2021">40823124 repo</a> | <a href="https://40823124.github.io/cd2021">40823124 site</a></p>
<p><a href="https://github.com/40823139/cd2021">40823139 repo</a> | <a href="https://40823139.github.io/cd2021">40823139 site</a></p>
<p><a href="https://github.com/40823126/cd2021">40823126 repo</a> | <a href="https://40823126.github.io/cd2021">40823126 site</a></p>
<p></p>
<p><a href="https://github.com/40823152/stage3-ag6">stage3-ag6 repo</a> | <a href="https://40823152.github.io/stage3-ag6">stage3-ag6 site</a></p>
<p></p>
<p><a href="https://github.com/40823152/cd2021">40823152 repo</a> | <a href="https://40823152.github.io/cd2021">40823152 site</a></p>
<p><a href="https://github.com/40823110/cd2021">40823110 repo</a> | <a href="https://40823110.github.io/cd2021">40823110 site</a></p>
<p><a href="https://github.com/4823122/cd2021">4823122 repo</a> | <a href="https://4823122.github.io/cd2021">4823122 site</a></p>
<p><a href="https://github.com/40823125/cd2021">40823125 repo</a> | <a href="https://40823125.github.io/cd2021">40823125 site</a></p>
<p><a href="https://github.com/40823117/cd2021">40823117 repo</a> | <a href="https://40823117.github.io/cd2021">40823117 site</a></p>
<p><a href="https://github.com/40823129/cd2021">40823129 repo</a> | <a href="https://40823129.github.io/cd2021">40823129 site</a></p>
<p><a href="https://github.com/40823149/cd2021">40823149 repo</a> | <a href="https://40823149.github.io/cd2021">40823149 site</a></p>
<p><a href="https://github.com/40823153/cd2021">40823153 repo</a> | <a href="https://40823153.github.io/cd2021">40823153 site</a></p>
<p></p>
<h3>task1-program</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("stage3_2a.txt") as fh:
   #先將我們存起來stage3_2a.txt打開並命名為fh
    data = fh.readlines()
    #讀取stage3_2a.txt裡的多資料行並存為data裡  這邊如果使用readline 就會變成讀取一行
#print(len(data)) 
#輸出為6  
for i in range(len(data)):
    #print(data[i])
    #i會從[0,1,2,3,4,5]依序執行
    data1 = data[i].replace('40823112','a40823112',1)
    #print(data1)
    #因為40823122的學號打錯了,所以用 replace 把舊的替換成新的
    data2 = data1.replace('\t\t','')
    print(data2)
    #因為有一組只有6人,所以用 replace 把空位刪除
    data3 = data2.replace('_','-')
    #因為在編輯txt的時候-會變成_,所以用 replace 把_修正為-
    group =data3.rstrip("\n").split("\t")
    #print(group)   
    print('&lt;p&gt;&lt;a href="https://github.com/'+group[1]+'/'+group[0]+'"&gt;'+group[0]+' repo&lt;/a&gt; | &lt;a href="https://'+group[2]+'.github.io/'+group[0]+'"&gt;'+group[0]+' site&lt;/a&gt;&lt;/p&gt;')
    print("&lt;p&gt;&lt;/p&gt;")
    #break
    #使用break讓迴圈執行一次終段查看輸出的值
    #先取出newdata list中的第i項,消除元素中/n,再以\t取出需要的文字

    for j in range(1,18,2):
    #設一個範圍,(1到18,每次+2,1&lt;=j&lt;18)
        try:
            n = group[j]#.replace('40823112','a40823112')
            #因為40823112的github帳號是a40823112,所以用 replace 把帳號修正
            print('&lt;p&gt;'+'&lt;a href="https://github.com/'+n+'/cd2021"&gt;'+n+' repo&lt;/a&gt; | &lt;a href="https://'+n+'.github.io/cd2021"&gt;'+n+' site&lt;/a&gt;&lt;/p&gt;')
        except:
           continue
    print("&lt;p&gt;&lt;/p&gt;")
        #這邊使用try.....except,因為有一組6個人,導致有空格,所以需要用continue讓迴圈繼續跑</pre>
<p></p>
<h2>w14</h2>
<h3>robotdk影片</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nmsebU5N4SE" width="560"></iframe></p>
<h3>what is xml</h3>
<ul>
<li>XML stands for eXtensible Markup Language      </li>
<li>XML is a markup language much like HTML        </li>
<li>XML was designed to store and transport data   </li>
<li>XML was designed to be self-descriptive           </li>
<li>XML is a W3C Recommendation                   </li>
<li>簡單來說就是將文件做好整理給不同設備讀或人讀取資料</li>
</ul>
<p></p>
<hr/>
<p>STL 轉 XML網址</p>
<p><a href="https://sendeyo.com/onlineconverter/en/stl/xml">https://sendeyo.com/onlineconverter/en/stl/xml</a></p>
<p></p>
<h2>w15</h2>
<h3>using algebra</h3>
<p>Here we have the same two link robot as we just looked at but this time we're going to solve it using an analytical approach, that is we're going to rely much more on algebra, particular linear algebra rather than geometry.</p>
<p>在這裡，我們有與剛才看到的相同的二連桿機構，但這次我們將使用分析方法來解決它，也就是說，我們將更多地依賴代數，特定的線性代數而不是幾何。</p>
<p><span> </span></p>
<p>We have an expression E, which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture, we can write the endefector pose as a sequence of elementary homogeneous transformations.</p>
<p>我們有一個表達式<span><span> </span>E</span>，它是表示機械手臂位置的齊次變換，我們在上一課中看過這個，我們可以將機械手臂位置寫為一系列基本齊次變換。</p>
<p><span> </span></p>
<p>A rotation by Q1, a translation along the X direction by A1, a rotation by Q2 and then a translation in the X direction by A2.</p>
<p><span>Q1</span>旋轉，<span>A1</span>沿<span>x</span>方向平移，<span>Q2</span>旋轉，然後<span>A2</span>沿<span>x</span>方向平移。</p>
<p><span> </span></p>
<p>If I expand this out, multiply all the transformations together, I get the expression shown here ; a three by three homogeneous transformation matrix representing the pose of the robot's endefector.</p>
<p>如果我將其展開，將所有變換相乘，就會得到此處所示的表達式；一個三乘三的齊次變換矩陣，表示機械手臂的最終位置。</p>
<p><span> </span></p>
<p>Now for this particular two link robot , we are only interested in the position of its endefector , it's X and Y co - ordinate and they are these two elements within the homogeneous transformation matrix , so I'm going to copy those out .</p>
<p>現在對於這個特殊的二連桿機構，我們只對它機械手臂的位置感興趣，它是<span>x</span>和<span>y</span>坐標，它們是齊次變換矩陣中的這兩個元素，所以我將把它們複製出來。</p>
<p><span> </span></p>
<p>So here again is our expression for X and Y and what we're going to do is a fairly common trick , we're going to square and add these two equations and I get a relationship that looks like this .</p>
<p>所以這裡又是我們對<span>x</span>和<span>y</span>的表達式，我們要做的是一個相當常見的技巧，我們要平方並添加這兩個方程，我得到一個看起來像這樣的關係式。</p>
<p><span> </span></p>
<p>Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2.</p>
<p>現在我可以根據機械手臂位置<span>x</span>和<span>y</span>以及機器人的常數<span>A1</span>和<span>A2</span>來求解節點角度<span>Q2</span>。</p>
<p><span> </span></p>
<p>Now what I'm going to do is apply the sum of angles identity .</p>
<p>現在我要做的是應用角度之和的特性。</p>
<p><span> </span></p>
<p>I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus Q2 and to make life a little bit easier, I'm going to make some substations, so where ever I had cos Q2, I'm going to write C2 and where ever I had sine Q2, I'm going to write S2.</p>
<p>我將展開這些項，<span>Q1</span>的正弦加<span>Q2</span>或<span>Q1</span>的<span>cos</span>加<span>Q2</span>，為了讓生活更輕鬆一點，我將建立一些部份，所以只要有<span>cos Q2</span>，我就會去取代<span>C2</span>並且在我有<span>sinQ2<span> </span></span>的地方，取代為<span>S2</span>。</p>
<p><span> </span></p>
<p>It's a fairly common shorthand when people are looking at robot kinematic equations. And here are the equations after making those substitutions.</p>
<p>當人們解決機器人運動學方程時，這是一個相當常見的快速記法。這是進行這些替換後的方程式。</p>
<p><span> </span></p>
<p>Looking at these two equations, I can see that they fall into a very well known form and for that form there is a very well known solution.</p>
<p>看看這兩個方程，我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個眾所周知的解決方案。</p>
<p><span> </span></p>
<p>So I'm going to consider just one of the equations, the equation for Y and using our well known identity and it's solution, I can determine the values for the variables little a, little b and little c and once l've determined those, then I can just write down the solution for Q1, which x is the equivalent of theta in this particular case.</p>
<p>所以我將只考慮其中一個方程式，<span>Y</span>，使用我們眾所周知的恆等式和它的解，我可以確定變量<span>a</span>、<span>b</span>、<span>c<span> </span></span>的值，一旦我確定了這些，然後我可以寫下<span>Q1</span>的解決方案，在這種特殊情況下，<span>x</span>相當於θ。</p>
<p><span> </span></p>
<p>Here again is our expression for Q1, copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; X squared plus Y squared is equal to this particular complex expression.</p>
<p>這裡再次是我們對<span>Q1</span>的表達式，從上一張幻燈片複製過來，我們可能還記得在我們工作的早期，我們確定了這種特殊關係；<span>X<sup>2</sup></span>加<span>Y<sup>2</sup></span>等於這個特定的複雜表達式。</p>
<p><span> </span></p>
<p>So I can substitute that in and do some simplification and I end up with this slightly less complex expression for Q1.</p>
<p>因此，我可以將其替換並進行一些簡化，最終得到Q1的這個稍微不那麼複雜的表達式。</p>
<p><strong><span> </span></strong></p>
<p>And it is the same expression that I got following the geometric approach in the previous section.</p>
<p>這與我在上一節中遵循幾何方法得到的表達式相同。</p>
<h3>using geometry</h3>
<p>We saw this simple two-link robot in the previous lecture about forward kinematics.</p>
<p>我們在上一堂關於正向運動學的講座中看到了這個簡單的二連桿機構。</p>
<p> </p>
<p>The tooltip pose of this robot is described simply by two numbers, the coordinates x and y with respect to the world coordinate frame.</p>
<p>該機構的工具提示姿態由兩個數字簡單描述，相對於世界的坐標系的坐標的X和Y。</p>
<p><span> </span></p>
<p>So, the problem here is that given x and y, we want to determine the joined angles, q1 and q2.</p>
<p>所以，這個問題在這裡是給定<span>x</span>跟<span>y</span>，我們想要求出這個節點的角度<span>q1</span>跟<span>q2</span>。</p>
<p><span> </span></p>
<p>The solution that we’re going to follow in this particular section is a geometric one.</p>
<p>這節我們將遵循這個特別的幾何方法來解決。</p>
<p><span> </span></p>
<p>We’re going to start with a simple piece of construction.</p>
<p>我們將從一個簡單的結構開始。</p>
<p> </p>
<p>We’re going to overlay the red triangle on top of our robot.</p>
<p>我們將一個紅色的三角形覆蓋在機構上。</p>
<p> </p>
<p>We know that the end point coordinate is x, y, so the vertical height of the triangle is y, the horizontal width is x.</p>
<p>我們知道結束的點坐標是x跟y，所以三角形的垂直距離是y，水平距離是x。</p>
<p> </p>
<p>And, using Pythagoras theorem, we can write r squared equals x squared plus y squared.</p>
<p>然後，利用畢氏定理，我們可以寫出 r<sup>2<span> </span></sup>= x<sup>2</sup><span> </span>+y<sup>2</sup>。</p>
<p> </p>
<p>So far, so easy.</p>
<p>到這裡很容易。</p>
<p> </p>
<p>Now, we’re going to look at this triangle highlighted here in red and we want to determine the angle alpha.</p>
<p>現在，我們開始看到這個以紅色突出顯示的三角形然後我們想確定α角。</p>
<p> </p>
<p>In order to do that, we need to use the cosine rule.</p>
<p>為了做到這點，我們需要用到餘弦定理。</p>
<p> </p>
<p>And, if you’re a little rusty on the cosine rule, here is a bit of a refresher.</p>
<p>如果你對餘弦定理有點生疏，這裡有一點複習。</p>
<p> </p>
<p>We have an arbitrary triangle.</p>
<p>我們有任意一個三角形。</p>
<p> </p>
<p>We don’t have any right angles in it and we’re going to label the length of this edge as A and the angle opposite that edge, we’re going to label as little a.</p>
<p>我們沒有任何直角，我們將這條邊的長度標記為 A，而與該邊相對的角度，我們將標記為小 a。</p>
<p> </p>
<p>And, we do the same for this edge and this angle, and this edge and this angle.</p>
<p>並且，我們對這條邊和這個角，以及這條邊和這個角做同樣的事情。</p>
<p> </p>
<p>So, all together, the sides are labelled capitals A, B and C, and the angles are labelled little a, little b, and little c.</p>
<p>因此，所有邊都標記為A、B、C，角標記為a、b、c。</p>
<p> </p>
<p>So, the cosine rule is simply this relationship here.</p>
<p>餘弦定理就是這種關係。</p>
<p> </p>
<p>It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it.</p>
<p>它有點像畢達哥拉斯的定理，除了末尾有cos a以外。</p>
<p> </p>
<p>Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago.</p>
<p>現在，讓我們將餘弦定理用於我們剛才所看到的三角形。</p>
<p> </p>
<p>It’s pretty straightforward to write down this particular relationship.</p>
<p>寫下這種特殊關係非常簡單。</p>
<p> </p>
<p>We can isolate the term cos alpha which gives us the angle alpha that we’re interested in.</p>
<p>我們可以分離出cosα，它給出了我們需要的角度α。</p>
<p> </p>
<p>And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y.</p>
<p>而且，他是根據連桿長度A1跟A2以及末端執行器位置x、y來定義的。</p>
<p> </p>
<p>We can write this simple relationship between the angles alpha and q2.</p>
<p>我們可以寫出簡單的關係在角度α跟q2之間。</p>
<p> </p>
<p>And, we know from the shape of the cosine function that cos of q2 must be equal to negative of cos alpha.</p>
<p>而且，我們從餘弦函數的形狀知道，cosq2必須等於-cosα。</p>
<p> </p>
<p>This time, let’s just write an expression for the cosine of the joined angle q2.</p>
<p>這一次，讓我們為節點角q2的餘弦函數寫一個表示式。</p>
<p> </p>
<p>Now, we’re going to draw yet another red triangle and we’re going apply some simple trigonometry here.</p>
<p>現在，讓我們畫一個另外的三角形然後利用簡單的三角函數。</p>
<p> </p>
<p>If we know q2, then we know this length and this length of the red triangle.</p>
<p>如果我們知道q2，甚至我們知道這個長度和這個紅色三角形的長度。</p>
<p> </p>
<p>We can write this relationship for the sine of the joined angle q2.</p>
<p>我們可以寫出節點角q2的正弦關係。</p>
<p> </p>
<p>Now, we can consider this bigger triangle whose angle is beta and this side length of this triangle is given here in blue.</p>
<p>現在，我們可以知道這個大的三角形，角度是β，然後由藍色表示此三角形的邊。</p>
<p> </p>
<p>And, the length of the other side of the triangle is this.</p>
<p>且三角形另一邊長度是這個。</p>
<p> </p>
<p>So, now we can write an expression for the angle beta in terms of these parameters here</p>
<p>所以，現在我們可以根據這些參數寫出角度β的表達式。</p>
<p> </p>
<p>Going back to the red triangle that we drew earlier, we can establish a relationship between q1 and the angle beta.</p>
<p>回到我們之前畫的紅色三角形，我們可以建立q1和角度β之間的關係。</p>
<p> </p>
<p>Introduce yet another angle, this one gamma and we can write a relationship between the angle gamma and the tooltip coordinates x and y.</p>
<p>引入另一個角度，γ，我們可以寫出角度γ和工具提示坐標x、y之間的關係。</p>
<p> </p>
<p>Now, we can write a simple relationship between the angles that we’ve constructed, gamma and beta and the joined angle we’re interested in which is q</p>
<p>現在，可以寫出我們建構的角度γ和β與我們感興趣的節點角q之間的簡單關係。</p>
<p> </p>
<p>And, the total relationship looks something like this.</p>
<p>而且，整個關係看起來像這樣。</p>
<p> </p>
<p>Quite a complex relationship, it gives us the angle of joined one, that’s q1 in terms of the end effector coordinates y and x, and a bunch of constants, a1 and a2, and it’s also a function of the second joint angle, q2.</p>
<p>相當複雜的關係，它為我們提供了連接的角度，即末端執行器坐標q1的y和x，以及一系列常數a1和a2，它也是第二個節點角q2的函數。</p>
<p> </p>
<p>So, let’s summarize what it is that we have derived here.</p>
<p>所以，讓我們總結一下我們在這裡得出的結論。</p>
<p> </p>
<p>We have an expression for the cosine of q2 and we have an expression for q1.</p>
<p>我們有cosq2以及q1的表達式。</p>
<p> </p>
<p>Now, the cosine function is symmetrical about 0.</p>
<p>現在，餘弦函數在0對稱。</p>
<p> </p>
<p>So, if we know the value of the cosine of q2, then there are two possible solutions a positive angle and a negative angle.</p>
<p>所以，如果我們知道cosq2的值可能有兩種解，正角或負角。</p>
<p> </p>
<p>We’re going to explicitly choose the positive angle. Which means that I can write this expression here.</p>
<p>我們將明確選擇正角。這意味著我可以在這裡寫這個表達式。</p>
<p> </p>
<p>And now, we have what we call the inverse kinematic solution for this two-link robot.</p>
<p>現在，我們有了這個二連桿機構的逆向運動學解決方法。</p>
<p> </p>
<p>We have an expression for the two joined angles, q1 and q2 in terms of the end effector pose x and y, and a bunch of constants.</p>
<p>我們有兩個節點角q1和q2的表達式，根據末端執行器姿勢x和y以及一系列常數。</p>
<p> </p>
<p>You notice that the two equations are not independent. The equation for q1, in fact, depends on the solution for q2.</p>
<p>你注意到這兩個方程式不是獨立的事實上，q1 的方程取決於 q2 的解。</p>
<p> </p>
<p>In this case, q2 is negative and we’re going to write the solution for q2 with a negative sign in front of the inverse cosine.</p>
<p>在這種情況下，q2是負數，我們將用負號在cos<sup>-1</sup>前寫出q2的解。</p>
<p> </p>
<p>Now, we need to solve for q1, so we’re going to introduce this particular red triangle, the angle beta that we solved previously, and the angle gamma which is defined in terms of y and x.</p>
<p>現在，我們需要求解q1，因此我們將利用這個紅色三角形，我們之前求解的角度β以及根據y、x定義的角度γ。</p>
<p> </p>
<p>Now, we write a slightly different relationship between q1, gamma and beta, different to what we had before. There’s a change of sign involved.</p>
<p>現在，我們在q1、γ和β之間寫出略有不同的關係，與我們之前的關係不同。 涉及到符號的變化。</p>
<p> </p>
<p>Then, we can substitute all that previous equation and come up with this expression for q1.</p>
<p>然後，我們可以替換之前的所有等式，並得出q1的這個表達式。</p>
<p> </p>
<p>Again, there is a change of sign here. Previously, this was a negative sign.</p>
<p>同樣，這裡的符號發生了變化。 以前，這是一個負號。</p>
<p> </p>
<p>And, here in summary form is the solution for the inverse kinematics of our two-link robot when it is in this particular configuration, where q2 is negative.</p>
<p>並且，這裡是我們的二連桿機構在這種特定配置下的逆向運動學總結形式，其中q2為負。</p>
<p> </p>
<p>Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative.</p>
<p>讓我們比較兩個解決方案，q2為正的情況和q2為負的情況。</p>
<p>結論 : 可以利用最終位置的 x、y 來計算機構的轉角 q1、q2</p>
<p>q1 =  <span>tan<sup>-1<span> </span></sup>(y/x) - tan<sup>-1<span> </span></sup>(a2 sinq2/a1+a2 cosq2)</span></p>
<p><span>q2 =  </span><span>cos<sup>-1</sup><span> </span>(x<sup>2</sup>+y<sup>2</sup>-a1<sup>2</sup>-a2<sup>2</sup>/2a1a2)</span></p>
<h2>w16</h2>
<h3>oneshape繪圖</h3>
<p><a href="https://cad.onshape.com/documents/ec3638947f8008f58291660b/w/c01a74c3edad00122b02b07f/e/f2607389dd386e939435e130">https://cad.onshape.com/documents/ec3638947f8008f58291660b/w/c01a74c3edad00122b02b07f/e/f2607389dd386e939435e130</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XRxYmfUz2MM" width="560"></iframe></p>
<h3>coppeliasim場景</h3>
<p><a href="https://cad.onshape.com/documents/237acbd81d988fa7b6904874/w/1aeca6ea5e20da6983c1fc09/e/1e974984345b08e2fdfd461c"></a></p>
<p><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IxPXJjgG1TA" width="560"></iframe>建立 CoppeliaSim 4.1.0 MTB robot 場景</p>
<h3>手臂末端加入 components-gripper-suction pad 吸盤跟鍵盤控制</h3>
<p>程式碼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">if (auxiliaryData[1]==112) then 
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','true')
      end 
if (auxiliaryData[1]==113) then 
sim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),'active','false')
      end </pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/8Xa7a9rc8nk" width="560"></iframe></p>
<h3>MTB_robot add IK</h3>
<p>lua程式測試網頁版</p>
<p><a href="https://www.runoob.com/try/runcode.php?filename=HelloWorld&amp;type=lua">https://www.runoob.com/try/runcode.php?filename=HelloWorld&amp;type=lua</a></p>
<p>角度計算程式</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">-- The decimal point of number x is rounded to the nth place
function round(x, n)
    n = math.pow(10, n or 0)
    x = x * n
    if x &gt;= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end
    return x / n
end
 
-- radian to degree
deg = 180/math.pi
-- link 1 length
a1 = 0.467
-- link 2 length
a2 = 0.4
-- derivated based upon https://www.youtube.com/watch?v=IKOGwoJ2HLk&amp;t=311s
function ik(x, y)
    -- (x, y) need to be located inside the circle with radius a1+a2
    if (x^2 + y^2) &lt;= (a1+ a2)^2 then
        q2 = math.acos((x^2+y^2-a1^2-a2^2)/(2*a1*a2))
        q1 = math.atan2(y, x) - math.atan2((a2*math.sin(q2)), (a1+a2*math.cos(q2)))
        return {round(q1*deg, 4), round(q2*deg, 4)}
    else
        print("Over range!")
        -- end the script execution
        os.exit()
    end
end
 
theta = ik(-0.3, -0.55)
 
print(theta[1], theta[2])</pre>
<p></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kAq3x0Ao2js" width="560"></iframe></p>
<p>位子控制程式碼</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">      if (auxiliaryData[1]==49) then --1
      V1=43.9242*deg
      V2=66.007*deg
      sim.setJointPosition(axis1, V1)
      sim.setJointPosition(axis2, V2)
      print(0.2,0.7)
      end
      if (auxiliaryData[1]==50) then --2
      V1=-158.2529*deg
      V2=87.7894*deg
      sim.setJointPosition(axis1, V1)
      sim.setJointPosition(axis2, V2)
      print(-0.3,0.55)
      end</pre>
<p></p>
<h3>MTB_robo use require</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/S8HkEw9G5yk" width="560"></iframe></p>
<h2>w17小組task</h2>
<p>籃球機控制檔案</p>
<p><a href="https://drive.google.com/drive/folders/1OLC3aaZDLjfOV83BSGXqwQgmlf1pcbRD?usp=sharing">籃球機 sensor</a></p>
<p><a href="https://drive.google.com/drive/folders/1Iw-gwgMGPL3zxq9aTTqa3zqRnfZ3IsFi?usp=sharing">final Basketball-Machine</a></p>
<p><a href="https://drive.google.com/file/d/1u6epma_WaJ0zNhJy27QHzvPD9I0Ar_ly/view?usp=sharing">籃球框3.1.7z</a></p>
<p><a href="https://drive.google.com/file/d/1dtXe2oAUYMcQbaaZTlia07DERVJ2DiG3/view?usp=sharing">籃球框3.2.7z</a></p>
<p>籃球框移動版本程式一</p>
<p>利用鍵盤控制</p>
<pre class="brush:lua;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
     axis3=sim.getObjectHandle('Prismatic_joint')
     distance3 = 0
end
 
function sysCall_actuation()
 message,auxiliaryData=sim.getSimulatorMessage()
 if (message==sim.message_keypress) then
      print(auxiliaryData[1])--key
      if (auxiliaryData[1]==string.byte(' ')) then
      end
      if (auxiliaryData[1]==2007) then --up
      distance3 = distance3 + 0.01
      sim.setJointPosition(axis3, distance3)
      end
      if (auxiliaryData[1]==2008) then --down
      distance3 = distance3 - 0.01
      sim.setJointPosition(axis3, distance3)
      end
 end   
end
</pre>
<p> 版本二利用迴圈做自動左右移動</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">function sysCall_init()
     j=sim.getObjectHandle('slide')
     d = 0--posion
     a=10
     b=0
end
 
function sysCall_actuation()

for i=0,10 do
      if (a==10) then
      d = d - 0.0003
      sim.setJointPosition(j, d)
      if(d&lt;=-0.5)then
      a=0
      b=10
      end
      print(11111)
      end
      if (b==10) then
      d = d + 0.0003
      sim.setJointPosition(j, d)
      if(d&gt;=0.5)then
      a=10
      b=0
      end
      print(333)
      end
      end  
end</pre>
<p></p><h1>bug</h1>
<p>wsgi打不開</p>
<p><img alt="" height="862" src="/images/螢幕擷取畫面 2021-06-10 131000.png" width="1203"/></p>
<p>將倉儲裡2個檔案複製一分到cmsimde資料夾裡</p>